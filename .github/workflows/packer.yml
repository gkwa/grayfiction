name: packer
"on":
  push:
    branches:
      - "**"
env:
  PACKER_ENV:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
    AWS_SUBNET_ID: ${{ secrets.AWS_SUBNET_ID }}
    AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
jobs:
  packer-first-attempt:
    runs-on: ubuntu-latest
    name: Packer First Attempt
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: "true"
      - name: Setup `packer`
        uses: hashicorp/setup-packer@1aa358be5cf73883762b302a3a03abd66e75b232
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
      - name: Run `packer init`
        id: init
        run: packer init .
      - name: Run `packer fmt`
        id: fmt
        run: packer fmt -check .
      - name: Run `packer validate`
        id: validate
        run: packer validate -syntax-only .
      - name: Run `packer build`
        id: build
        run: packer build -force -var-file=variables.json aws-ubuntu.pkr.hcl
        env: ${{ env.PACKER_ENV }}
      - name: Cleanup Packer Resources
        if: failure() || cancelled()
        run: |
          pkill packer
  packer-second-attempt:
    needs: packer-first-attempt
    if: needs.packer-first-attempt.result == 'failure'
    runs-on: ubuntu-latest
    name: Packer Second Attempt
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: "true"
      - name: Setup `packer`
        uses: hashicorp/setup-packer@1aa358be5cf73883762b302a3a03abd66e75b232
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
      - name: Run `packer init`
        id: init
        run: packer init .
      - name: Run `packer fmt`
        id: fmt
        run: packer fmt -check .
      - name: Run `packer validate`
        id: validate
        run: packer validate -syntax-only .
      - name: Run `packer build`
        id: build
        run: packer build -force -var-file=variables.json aws-ubuntu.pkr.hcl
        env: ${{ env.PACKER_ENV }}
      - name: Cleanup Packer Resources
        if: failure() || cancelled()
        run: |
          pkill packer
  packer-third-attempt:
    needs: packer-second-attempt
    if: needs.packer-second-attempt.result == 'failure'
    runs-on: ubuntu-latest
    name: Packer Third Attempt
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: "true"
      - name: Setup `packer`
        uses: hashicorp/setup-packer@1aa358be5cf73883762b302a3a03abd66e75b232
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
      - name: Run `packer init`
        id: init
        run: packer init .
      - name: Run `packer fmt`
        id: fmt
        run: packer fmt -check .
      - name: Run `packer validate`
        id: validate
        run: packer validate -syntax-only .
      - name: Run `packer build`
        id: build
        run: packer build -force -var-file=variables.json aws-ubuntu.pkr.hcl
        env: ${{ env.PACKER_ENV }}
      - name: Cleanup Packer Resources
        if: failure() || cancelled()
        run: |
          pkill packer
  required-check:
    name: At least one test passed
    needs:
      - packer-first-attempt
      - packer-second-attempt
      - packer-third-attempt
    if: |
      always() &&
      (needs.packer-first-attempt.result == 'success' ||
      needs.packer-second-attempt.result == 'success' ||
      needs.packer-third-attempt.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - run: echo "At least one test passed!"
